const fs = require('fs-extra')

const srcContentDir = `./src/content`;
const src_Dir = `./static`;
const destDir = `./static_autogenerated`;

function checkFolder(folder) {
    fs.readdir(folder, (err, files) => {
        // Cicle files on current folder
        // console.log('reading', folder)
        const regexRename = /^!?\[\.\.\.[\d]+\]/g
        const regexDelete = /(^!|\.md$|\.svx$|\.svelte$|\.page$)/g
        for (const file of files) {
            // console.log('Check', file)
            // Test regular expression
            const newFilename = file.replace(regexRename, '')
            if(regexDelete.test(file)) {
                fs.unlinkSync(folder+'/'+file)
            } else {
                if (regexRename.test(file)) {
                    // Add more logic to rename file
                    fs.renameSync(folder+'/'+file, folder+'/'+newFilename, (err) => {
                    // console.log('Renaming', file, "to", newFilename)
                    if (err) throw err
                    })
                }
                if(fs.statSync(folder+'/'+newFilename).isDirectory()) {
                    // console.log (newFilename, 'is folder')
                    checkFolder(folder+'/'+newFilename)
                }
            }
        }
      })
}


    console.log('Packing static folder...');
    
    // fs.readdir('./', (err, files) => {
    //     files.forEach(file => {
    //       console.log(file);
    //     });
    //   });

    console.log('Delete', destDir);
    fs.removeSync(destDir);

    try {
        fs.copySync(srcContentDir, destDir, { overwrite: true })
        console.log(srcContentDir, 'coppied to', destDir)
    } catch (err) {
        console.error(err)
    }

    // Read directory

    checkFolder(destDir)
  

    try {
        fs.copySync(src_Dir, destDir, { overwrite: true })
        console.log('success coppy', src_Dir, 'coppied to', destDir)
    } catch (err) {
        console.error(err)
    }
